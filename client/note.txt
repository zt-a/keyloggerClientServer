Запуск Python-скрипта в фоновом режиме зависит от операционной системы, на которой вы работаете. Вот несколько способов сделать это:

---

### 1. **На Linux**

#### Использование `&` для запуска в фоновом режиме:
```bash
python3 script.py &
```
> `&` запускает процесс в фоновом режиме. Вы можете продолжить использовать терминал.

#### С использованием `nohup`:
```bash
nohup python3 script.py &
```
> `nohup` предотвращает завершение процесса, если вы закроете терминал. Логи будут записаны в файл `nohup.out`.

#### Перенаправление вывода в файл:
```bash
nohup python3 script.py > output.log 2>&1 &
```
> Это отправляет стандартный вывод и ошибки в файл `output.log`.

#### Использование `screen`:
1. Установите `screen`, если он не установлен:
   ```bash
   sudo apt install screen
   ```
2. Создайте новую сессию:
   ```bash
   screen -S my_script
   ```
3. Запустите скрипт:
   ```bash
   python3 script.py
   ```
4. Выйдите из сессии, не останавливая процесс, с помощью сочетания клавиш:
   ```bash
   Ctrl+A, затем D
   ```
5. Чтобы вернуться к сессии:
   ```bash
   screen -r my_script
   ```

#### Использование `tmux` (альтернатива `screen`):
1. Установите `tmux`:
   ```bash
   sudo apt install tmux
   ```
2. Создайте новую сессию:
   ```bash
   tmux new -s my_script
   ```
3. Запустите скрипт:
   ```bash
   python3 script.py
   ```
4. Отсоединитесь от сессии:
   ```bash
   Ctrl+B, затем D
   ```
5. Вернитесь к сессии:
   ```bash
   tmux attach -t my_script
   ```

---

### 2. **На Windows**

#### Использование `start` в командной строке:
```cmd
start /B python script.py
```
> Ключ `/B` запускает процесс в фоновом режиме, без нового окна.

#### Использование `Task Scheduler`:
1. Откройте *Task Scheduler* (Планировщик задач).
2. Создайте новую задачу.
3. Укажите путь к вашему Python-скрипту и добавьте `python.exe` в качестве приложения для запуска.

---

### 3. **Кроссплатформенный способ: Использование Python-библиотеки**

#### С помощью библиотеки `subprocess`:
Вы можете запустить другой Python-скрипт из текущего скрипта в фоновом режиме:
```python
import subprocess

subprocess.Popen(["python", "script.py"])
```
> Это запускает `script.py` в фоновом режиме, а основной скрипт продолжает работу.

---

### 4. **Использование менеджеров процессов**

#### PM2 (обычно для Node.js, но поддерживает Python):
1. Установите PM2:
   ```bash
   npm install pm2 -g
   ```
2. Запустите Python-скрипт с PM2:
   ```bash
   pm2 start script.py --interpreter python3
   ```

---

Выберите способ, который лучше всего подходит для вашей задачи и системы.